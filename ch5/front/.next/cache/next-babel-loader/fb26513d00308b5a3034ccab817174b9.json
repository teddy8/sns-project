{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Git\\\\usr\\\\react-nodebird\\\\ch5\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { Button, Form, Input, Card, Icon, Avatar, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { useInput } from '../pages/signup';\nimport PropTypes, { string, object } from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!isLoggedIn) {\n      return alert('댓글보려면 로그인이 필요합니다.');\n    }\n\n    if (!commentText) return;\n    setCommentText('');\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [isLoggedIn, commentText]);\n  var onToggleComment = useCallback(function () {\n    // console.log('댓글아이콘 클릭');\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n}; // PostCard.propTypes = {\n//     post: PropTypes.shape({\n//         User: PropTypes.object,\n//         content: PropTypes.string,\n//         img: PropTypes.string,\n//         // createdAt: object,\n//     })\n// }\n\n\nexport default PostCard;","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch5/front/components/PostCard.js"],"names":["React","useCallback","useState","Button","Form","Input","Card","Icon","Avatar","List","Comment","useSelector","useDispatch","Link","useInput","PropTypes","string","object","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","isLoggedIn","isAddingComment","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onToggleComment","prev","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAiDC,IAAjD,EAAuDC,OAAvD,QAAqE,MAArE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,OAAOC,SAAP,IAAoBC,MAApB,EAA4BC,MAA5B,QAA0C,YAA1C;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACuBlB,QAAQ,CAAC,KAAD,CAD/B;AAAA,MACpBmB,iBADoB;AAAA,MACDC,oBADC;;AAAA,mBAEWpB,QAAQ,CAAC,EAAD,CAFnB;AAAA,MAEpBqB,WAFoB;AAAA,MAEPC,cAFO;;AAAA,qBAGJb,WAAW,CAAC,UAAAc,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHP;AAAA,MAGnBC,UAHmB,gBAGnBA,UAHmB;;AAAA,sBAIChB,WAAW,CAAC,UAAAc,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CAJZ;AAAA,MAInBQ,eAJmB,iBAInBA,eAJmB;;AAK3B,MAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AAEA,MAAMkB,eAAe,GAAG7B,WAAW,CAAC,UAAC8B,CAAD,EAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACL,UAAL,EAAiB;AACb,aAAOM,KAAK,CAAC,mBAAD,CAAZ;AACH;;AAED,QAAI,CAACV,WAAL,EACI;AAEJC,IAAAA,cAAc,CAAC,EAAD,CAAd;AAEA,WAAOK,QAAQ,CAAC;AACZK,MAAAA,IAAI,EAAEhB,mBADM;AAEZiB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB;AADX;AAFM,KAAD,CAAf;AAOH,GAnBkC,EAmBhC,CAACV,UAAD,EAAaJ,WAAb,CAnBgC,CAAnC;AAqBA,MAAMe,eAAe,GAAGrC,WAAW,CAAC,YAAM;AACtC;AACAqB,IAAAA,oBAAoB,CAAC,UAAAiB,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAApB;AACH,GAHkC,EAGhC,EAHgC,CAAnC;AAKA,MAAMC,mBAAmB,GAAGvC,WAAW,CAAC,UAAC8B,CAAD,EAAO;AAC3CP,IAAAA,cAAc,CAACO,CAAC,CAACU,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AACI,IAAA,GAAG,EAAE,CAACtB,IAAI,CAACuB,SADf;AAEI,IAAA,KAAK,EAAEvB,IAAI,CAACwB,GAAL,IAAY;AAAK,MAAA,GAAG,EAAC,SAAT;AAAmB,MAAA,GAAG,EAAExB,IAAI,CAACwB,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFvB;AAGI,IAAA,OAAO,EAAE,CACL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAEL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,GAAG,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,EAGL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEN,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,GAAG,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJK,CAHb;AASI,IAAA,KAAK,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASlB,IAAI,CAACyB,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAE1B,IAAI,CAACyB,IAAL,CAAUC,QAFrB;AAGI,IAAA,WAAW,EAAE1B,IAAI,CAAC2B,OAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADJ,EAkBM1B,iBAAiB,IACf,4BACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEP,WAAhC;AAA6C,IAAA,QAAQ,EAAEiB,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEZ,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CADJ,EAOI,MAAC,IAAD;AACI,IAAA,MAAM,YAAKR,IAAI,CAAC4B,QAAL,GAAgB5B,IAAI,CAAC4B,QAAL,CAAcC,MAA9B,GAAuC,CAA5C,kBADV;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAE7B,IAAI,CAAC4B,QAAL,IAAiB,EAHjC;AAII,IAAA,UAAU,EAAE,oBAAAE,IAAI;AAAA,aACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,OAAD;AACI,QAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADtB;AAEI,QAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASI,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAFZ;AAGI,QAAA,OAAO,EAAEI,IAAI,CAACH,OAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADY;AAAA,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAnBR,CADA;AA6CH,CAlFD,C,CAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe5B,QAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport {Button, Form, Input, Card, Icon, Avatar, List, Comment} from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Link from 'next/link'\r\nimport {useInput} from '../pages/signup'\r\nimport PropTypes, { string, object } from 'prop-types'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { isLoggedIn } = useSelector(state => state.user);\r\n    const { isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n    \r\n        if (!isLoggedIn) {\r\n            return alert('댓글보려면 로그인이 필요합니다.')\r\n        }\r\n        \r\n        if (!commentText)\r\n            return;\r\n\r\n        setCommentText('');\r\n\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n                \r\n            }\r\n        })\r\n    }, [isLoggedIn, commentText])\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // console.log('댓글아이콘 클릭');\r\n        setCommentFormOpened(prev => !prev);\r\n    }, [])\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, [])\r\n\r\n    return (\r\n    <div>\r\n        <Card \r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} />}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta \r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={post.content}\r\n            />\r\n        </Card>\r\n        { commentFormOpened && (\r\n            <>\r\n                <Form onSubmit={onSubmitComment}>\r\n                    <Form.Item>\r\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                </Form>\r\n                <List \r\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={post.Comments || []}\r\n                    renderItem={item => (\r\n                        <li>\r\n                            <Comment \r\n                                author={item.User.nickname}\r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content={item.content}\r\n                            />\r\n                        </li>\r\n                    )}\r\n                />\r\n            </>\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\n// PostCard.propTypes = {\r\n//     post: PropTypes.shape({\r\n//         User: PropTypes.object,\r\n//         content: PropTypes.string,\r\n//         img: PropTypes.string,\r\n//         // createdAt: object,\r\n//     })\r\n// }\r\n\r\nexport default PostCard\r\n\r\n"]},"metadata":{},"sourceType":"module"}