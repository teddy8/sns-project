{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS } from '../reducers/post'; // import next from 'next';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield addPostAPI(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: LOAD_MAIN_POSTS_REQUEST\n    });\n  } catch (e) {\n    console.log('e = ' + e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts/');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield loadMainPostsAPI();\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadMainPosts)]);\n}","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch5/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","console","log","error","watchAddPost","addComment","postId","watchAddComment","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACIC,mBADJ,EAC0BC,mBAD1B,EAC+CC,mBAD/C,EAEIC,uBAFJ,EAE6BC,uBAF7B,EAEsDC,uBAFtD,QAGO,kBAHP,C,CAKA;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOX,KAAK,CAACY,IAAN,CAAW,QAAX,EAAqBD,QAArB,EAA+B;AAClCE,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMN,UAAU,CAACK,MAAM,CAACE,IAAR,CAA/B;AAEA,UAAMnB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEhB,gBADA;AAENe,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIA,UAAMnB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH,GAVD,CAUE,OAAOY,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAQF,CAApB;AAEA,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEf,gBADA;AAENmB,MAAAA,KAAK,EAAEH;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,YAAV,GAAyB;AACrB,QAAM1B,UAAU,CAACI,gBAAD,EAAmBa,OAAnB,CAAhB;AACH;;AAED,UAAUU,UAAV,CAAqBT,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEb,mBADA;AAENY,MAAAA,IAAI,EAAE;AACFQ,QAAAA,MAAM,EAAEV,MAAM,CAACE,IAAP,CAAYQ;AADlB;AAFA,KAAD,CAAT;AAMH,GARD,CAQE,OAAON,CAAP,EAAU;AACR,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ,mBADA;AAENgB,MAAAA,KAAK,EAAEH;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,eAAV,GAA4B;AACxB,QAAM7B,UAAU,CAACO,mBAAD,EAAsBoB,UAAtB,CAAhB;AACH;;AAED,SAASG,gBAAT,GAA4B;AACxB,SAAO3B,KAAK,CAAC4B,GAAN,CAAU,SAAV,CAAP;AACH;;AAED,UAAUC,aAAV,GAA0B;AACtB,MAAI;AACA,UAAMb,MAAM,GAAG,MAAMW,gBAAgB,EAArC;AACA,UAAM7B,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAET,uBADA;AAENQ,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAME,CAAN,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEV,uBADA;AAENc,MAAAA,KAAK,EAAEH;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,kBAAV,GAA+B;AAC3B,QAAMjC,UAAU,CAACU,uBAAD,EAA0BsB,aAA1B,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMpC,GAAG,CAAC,CACNC,IAAI,CAAC2B,YAAD,CADE,EAEN3B,IAAI,CAAC8B,eAAD,CAFE,EAGN9B,IAAI,CAACkC,kBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \r\n    ADD_COMMENT_REQUEST,  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, \r\n} from '../reducers/post';\r\n\r\n// import next from 'next';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post/', postData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield addPostAPI(action.data);\r\n        \r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_REQUEST,\r\n        })\r\n    } catch (e) {\r\n        console.log('e = '+ e);\r\n        \r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)    \r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts/');\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield loadMainPostsAPI();\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadMainPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}