{"ast":null,"code":"var _jsxFileName = \"C:\\\\Program Files\\\\Git\\\\usr\\\\react-nodebird\\\\ch3\\\\front\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper';\nimport AppLayout from '../components/AppLayout';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from '../reducers';\n\nconst NodeBird = ({\n  Component,\n  store\n}) => {\n  return __jsx(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"NodeBird ch3\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), __jsx(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object\n};\nexport default withRedux((initialState, options) => {\n  const middlewares = []; // 아래는 그냥 외우면 된다. 이부분만 바뀔거라서\n  // enhance는 향상시키다 이런 뜻. 리덕스의 기능을 향상시킨다고 보면 됨. compose는 미들웨어적용시 미들웨어끼리 합성을 할 수 있다.\n\n  const enhancer = compose(applyMiddleware(...middlewares), false && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  return store;\n})(NodeBird); // 하이오드 컴포넌트. 리액트 핫로더할 때처럼.","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch3/front/pages/_app.js"],"names":["React","Component","Head","PropTypes","withRedux","AppLayout","createStore","compose","applyMiddleware","Provider","reducer","NodeBird","store","propTypes","elementType","object","initialState","options","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEV,EAAAA,SAAF;AAAaW,EAAAA;AAAb,CAAD,KAA0B;AACvC,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,6DAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADJ;AAWH,CAZD;;AAcAD,QAAQ,CAACE,SAAT,GAAqB;AACjBZ,EAAAA,SAAS,EAAEE,SAAS,CAACW,WADJ;AAEjBF,EAAAA,KAAK,EAAET,SAAS,CAACY;AAFA,CAArB;AAKA,eAAeX,SAAS,CAAC,CAACY,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMC,WAAW,GAAG,EAApB,CADgD,CACpB;AAE5B;;AACA,QAAMC,QAAQ,GAAGZ,OAAO,CACpBC,eAAe,CAAC,GAAGU,WAAJ,CADK,EAEpB,SAAiCE,MAAM,CAACC,4BAAP,KAAwC,WAAzE,GAAuFD,MAAM,CAACC,4BAAP,EAAvF,GAAgIC,CAAD,IAAOA,CAFlH,CAAxB;AAKA,QAAMV,KAAK,GAAGN,WAAW,CAACI,OAAD,EAAUM,YAAV,EAAwBG,QAAxB,CAAzB;AACA,SAAOP,KAAP;AACH,CAXuB,CAAT,CAWZD,QAXY,CAAf,C,CAWc","sourcesContent":["import React, { Component } from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport withRedux from 'next-redux-wrapper'\r\n\r\nimport AppLayout from '../components/AppLayout'\r\n\r\nimport {createStore, compose, applyMiddleware} from 'redux'\r\nimport { Provider } from 'react-redux';\r\nimport reducer from '../reducers'\r\n\r\nconst NodeBird = ({ Component, store }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Head>\r\n                <title>NodeBird ch3</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\"></link>\r\n            </Head>\r\n            <AppLayout>\r\n                <Component />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nNodeBird.propTypes = {\r\n    Component: PropTypes.elementType,\r\n    store: PropTypes.object,\r\n}\r\n\r\nexport default withRedux((initialState, options) => {\r\n    const middlewares = [];     // 아래는 그냥 외우면 된다. 이부분만 바뀔거라서\r\n\r\n    // enhance는 향상시키다 이런 뜻. 리덕스의 기능을 향상시킨다고 보면 됨. compose는 미들웨어적용시 미들웨어끼리 합성을 할 수 있다.\r\n    const enhancer = compose(  \r\n        applyMiddleware(...middlewares),\r\n        typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f\r\n    ); \r\n        \r\n    const store = createStore(reducer, initialState, enhancer);\r\n    return store;\r\n})(NodeBird); // 하이오드 컴포넌트. 리액트 핫로더할 때처럼. "]},"metadata":{},"sourceType":"module"}