{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  isAddingComment: false,\n  commentAdded: false,\n  addCommentErrorReason: '',\n  addPostErrorReason: '',\n  // 포스트 업로드 실패 이유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  imagePaths: [],\n  mainPosts: []\n}; // const dummyPost = {\n//     id: 2,\n//     content: '나는 더미입니다.',\n//     Comments: [],\n//     // img: 'https://sb-content-file.s3-ap-northeast-1.amazonaws.com/smallbridge_favicon.png'\n//     User: {\n//         id: 1,\n//         nickname: '오한민',\n//     },\n// }\n// const dummyComment = {\n//     id: 1,\n//     User: {\n//       id: 1,\n//       nickname: '제로초',\n//     },\n//     createdAt: new Date(),\n//     content: '더미 댓글입니다.',\n//   };\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_DUMMY = 'ADD_DUMMY';\nconst addDummy = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'Hello',\n    UserId: 1,\n    User: {\n      nickname: '제로초'\n    }\n  }\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        console.log('new image path = ' + action.data);\n        return _objectSpread({}, state, {\n          imagePaths: [...state.imagePaths, ...action.data]\n        });\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n\n    case RETWEET_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_IMAGE:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n        });\n      }\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          addPostErrorReason: '',\n          isAddingPost: true\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          // mainPosts: [dummyPost, ...state.mainPosts],\n          mainPosts: [action.data, ...state.mainPosts],\n          isAddingPost: false,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          addPostErrorReason: action.error,\n          isAddingPost: false\n        });\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.map(v => v.id === action.data.postId ? _objectSpread({}, v, {\n            Likers: [...v.Likers, {\n              id: action.data.userId\n            }]\n          }) : v)\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        console.log('1 = ', action.data.userId);\n        console.log('2 = ', action.data.postId);\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.map(v => v.id === action.data.postId ? _objectSpread({}, v, {\n            Likers: v.Likers.filter(v => v.id !== action.data.userId)\n          }) : v)\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_DUMMY:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          commentAdded: false,\n          addCommentErrorReason: ''\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.map(v => v.id === action.data.postId ? _objectSpread({}, v, {\n            Comments: [...v.Comments, action.data.comment]\n          }) : v),\n          isAddingComment: false,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        console.error('reason = ' + action.error);\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.map(v => v.id == action.data.postId ? _objectSpread({}, v, {\n            Comments: action.data.comments\n          }) : v)\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n      {\n        // console.log('response mainPosts = ' + JSON.stringify(action.data));\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_COMMENTS_FAILURE:\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch6/front/reducers/post.js"],"names":["initialState","isAddingComment","commentAdded","addCommentErrorReason","addPostErrorReason","isAddingPost","imagePaths","mainPosts","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","ADD_DUMMY","addDummy","type","data","content","UserId","User","nickname","state","action","console","log","filter","v","i","index","error","map","id","postId","Likers","userId","Comments","comment","comments"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    isAddingComment: false,\r\n    commentAdded: false,\r\n    addCommentErrorReason: '',\r\n    addPostErrorReason: '', // 포스트 업로드 실패 이유\r\n    isAddingPost: false, // 포스트 업로드 중\r\n    imagePaths: [],    \r\n    mainPosts: [],\r\n};\r\n\r\n// const dummyPost = {\r\n//     id: 2,\r\n//     content: '나는 더미입니다.',\r\n//     Comments: [],\r\n//     // img: 'https://sb-content-file.s3-ap-northeast-1.amazonaws.com/smallbridge_favicon.png'\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: '오한민',\r\n//     },\r\n// }\r\n\r\n// const dummyComment = {\r\n//     id: 1,\r\n//     User: {\r\n//       id: 1,\r\n//       nickname: '제로초',\r\n//     },\r\n//     createdAt: new Date(),\r\n//     content: '더미 댓글입니다.',\r\n//   };\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST'\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS'\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\nexport const ADD_DUMMY = 'ADD_DUMMY';\r\n\r\nconst addDummy = {\r\n    type: ADD_DUMMY,\r\n    data: {\r\n        content: 'Hello',\r\n        UserId: 1,\r\n        User: {\r\n            nickname: '제로초',\r\n        }\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPLOAD_IMAGES_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }       \r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            console.log('new image path = ' + action.data);\r\n            \r\n            return {\r\n                ...state,\r\n                imagePaths: [...state.imagePaths, ...action.data]\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case RETWEET_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }       \r\n        case RETWEET_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts]\r\n            }\r\n        }\r\n        case RETWEET_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case REMOVE_IMAGE: {\r\n            return {\r\n                ...state,\r\n                imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\r\n            }\r\n        }\r\n\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addPostErrorReason: '',\r\n                isAddingPost: true\r\n            }\r\n        }       \r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                // mainPosts: [dummyPost, ...state.mainPosts],\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                isAddingPost: false,\r\n                imagePaths: [],\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                addPostErrorReason: action.error,\r\n                isAddingPost: false\r\n            }\r\n        }\r\n \r\n        case LIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }       \r\n        case LIKE_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map(v => \r\n                    v.id === action.data.postId ?\r\n                    {\r\n                        ...v, \r\n                        Likers: [...v.Likers, { id: action.data.userId } ]\r\n                    }\r\n                    : v\r\n                ),\r\n            }\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case UNLIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }       \r\n        case UNLIKE_POST_SUCCESS: {\r\n            console.log('1 = ' , action.data.userId);\r\n            console.log('2 = ' , action.data.postId);\r\n            \r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map(v => \r\n                    v.id === action.data.postId ?\r\n                    {\r\n                        ...v,\r\n                        Likers: v.Likers.filter(v=>v.id !== action.data.userId)\r\n                    }\r\n                    : v\r\n                )\r\n            }\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        case ADD_DUMMY: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n            }\r\n        }\r\n\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                commentAdded: false,\r\n                addCommentErrorReason: ''\r\n            }\r\n        }\r\n\r\n        case ADD_COMMENT_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map(v => \r\n                    v.id === action.data.postId ?\r\n                    {    \r\n                        ...v, \r\n                        Comments : [...v.Comments, action.data.comment] \r\n                    } \r\n                    : v\r\n                ),\r\n                isAddingComment: false,\r\n                commentAdded: true,            \r\n            }\r\n        }\r\n        \r\n        case ADD_COMMENT_FAILURE: {\r\n            console.error('reason = ' + action.error);\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            }\r\n        }  \r\n\r\n        case LOAD_COMMENTS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map(v => \r\n                    v.id == action.data.postId ? \r\n                    {\r\n                        ...v, \r\n                        Comments: action.data.comments\r\n                    }\r\n                    : v\r\n                ),\r\n            }\r\n        }\r\n\r\n        case LOAD_MAIN_POSTS_REQUEST: \r\n        case LOAD_USER_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [],\r\n            }\r\n        }       \r\n\r\n        case LOAD_MAIN_POSTS_SUCCESS:\r\n        case LOAD_USER_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS: {\r\n            // console.log('response mainPosts = ' + JSON.stringify(action.data));\r\n            return {\r\n                ...state,\r\n                mainPosts: action.data,\r\n            }\r\n        }\r\n\r\n        case LOAD_COMMENTS_FAILURE:\r\n        case LOAD_MAIN_POSTS_FAILURE:\r\n        case LOAD_USER_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return {...state};\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}