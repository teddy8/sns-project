{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { Button, Form, Input, Card, Icon, Avatar, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport { useInput } from '../pages/signup';\nimport PropTypes, { string, object } from 'prop-types';\nimport PostCardContent from '../components/PostCardContent';\nimport PostImages from '../components/PostImages';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn,\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var isLiked = isLoggedIn && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var isFollowinged = isLoggedIn && me.Followings && me.Followings.find(function (v) {\n    return v.id === post.UserId;\n  }); // 내가 아이디가 1인데 2를 팔로우한 상태면 id:2 이렇게 들어있을 것.   \n  // post.UserId 가 me.Followings  내가 팔로우한 명단에 있는지 확인\n\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!isLoggedIn) {\n      return alert('댓글보려면 로그인이 필요합니다.');\n    }\n\n    if (!commentText) return;\n    setCommentText(''); // console.log('post id = ' + post.id);\n    // console.log('comment text = ' + commentText);\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [isLoggedIn, commentText]);\n  var onToggleComment = useCallback(function () {\n    console.log('댓글아이콘 클릭');\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n    dispatch({\n      type: LOAD_COMMENTS_REQUEST,\n      data: post.id\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) return alert('로그인이 필요합니다.');\n\n    if (isLiked) {\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, isLiked]);\n  var onToggleRetweet = useCallback(function () {\n    console.log('리트윗 버튼 클릭');\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n\n  var onClickFollow = function onClickFollow() {\n    if (!me) return alert('로그인이 필요합니다.');\n\n    if (isFollowinged) {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: post.UserId\n      });\n    } else {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: post.UserId\n      });\n    }\n  };\n\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt // cover={ post.Images && post.Images[0] && <img alt=\"example\" src={\"http://localhost:3065/\" + post.Images[0].src} />}\n    ,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onToggleRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      theme: isLiked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, {\n      onClick: onClickFollow\n    }, isFollowinged ? '언팔로우' : '팔로우'),\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null\n  }, post.RetweetId ? __jsx(React.Fragment, null, __jsx(Card, {\n    cover: post.Retweet.Images && post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      } // (\"/user?id=1\")\n      ,\n      as: \"/user/\".concat(post.Retweet.User.id) // (\"/user/1\")\n\n    }, __jsx(\"a\", null, \" \", __jsx(Avatar, null, post.Retweet.User.nickname[0]), \" \")),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      content: post.Retweet.content\n    })\n  }))) : __jsx(React.Fragment, null, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      } // (\"/user?id=1\")\n      ,\n      as: \"/user/\".concat(post.User.id) // (\"/user/1\")\n\n    }, __jsx(\"a\", null, \" \", __jsx(Avatar, null, post.User.nickname[0]), \" \")),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      content: post.content\n    })\n  }))), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, null, item.User.nickname[0]),\n        content: item.content\n      }));\n    }\n  })));\n}; // PostCard.propTypes = {\n//     post: PropTypes.shape({\n//         User: PropTypes.object,\n//         content: PropTypes.string,\n//         img: PropTypes.string,\n//         // createdAt: object,\n//     })\n// }\n\n\nexport default PostCard;","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch7/front/components/PostCard.js"],"names":["React","useCallback","useState","Button","Form","Input","Card","Icon","Avatar","List","Comment","useSelector","useDispatch","Link","useInput","PropTypes","string","object","PostCardContent","PostImages","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","isLoggedIn","me","isAddingComment","dispatch","isLiked","Likers","find","v","id","isFollowinged","Followings","UserId","onSubmitComment","e","preventDefault","alert","type","data","postId","content","onToggleComment","console","log","prev","onChangeCommentText","target","value","onToggleLike","onToggleRetweet","onClickFollow","createdAt","Images","RetweetId","User","nickname","Retweet","pathname","query","Comments","length","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAiDC,IAAjD,EAAuDC,OAAvD,QAAqE,MAArE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,OAAOC,SAAP,IAAoBC,MAApB,EAA4BC,MAA5B,QAA0C,YAA1C;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SACIC,mBADJ,EACyBC,qBADzB,EAEIC,iBAFJ,EAEuBC,mBAFvB,EAE4CC,eAF5C,QAGO,kBAHP;AAIA,SACIC,mBADJ,EACyBC,qBADzB,QAEO,kBAFP;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACuB1B,QAAQ,CAAC,KAAD,CAD/B;AAAA,MACpB2B,iBADoB;AAAA,MACDC,oBADC;;AAAA,mBAEW5B,QAAQ,CAAC,EAAD,CAFnB;AAAA,MAEpB6B,WAFoB;AAAA,MAEPC,cAFO;;AAAA,qBAGArB,WAAW,CAAC,UAAAsB,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHX;AAAA,MAGnBC,UAHmB,gBAGnBA,UAHmB;AAAA,MAGPC,EAHO,gBAGPA,EAHO;;AAAA,sBAICzB,WAAW,CAAC,UAAAsB,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CAJZ;AAAA,MAInBS,eAJmB,iBAInBA,eAJmB;;AAK3B,MAAMC,QAAQ,GAAG1B,WAAW,EAA5B;AACA,MAAM2B,OAAO,GAAGJ,UAAU,IAAIP,IAAI,CAACY,MAAnB,IAA6BZ,IAAI,CAACY,MAAL,CAAYC,IAAZ,CAAiB,UAAAC,CAAC;AAAA,WAAEA,CAAC,CAACC,EAAF,KAASP,EAAE,CAACO,EAAd;AAAA,GAAlB,CAA7C;AACA,MAAMC,aAAa,GAAGT,UAAU,IAAIC,EAAE,CAACS,UAAjB,IAA+BT,EAAE,CAACS,UAAH,CAAcJ,IAAd,CAAmB,UAAAC,CAAC;AAAA,WAAEA,CAAC,CAACC,EAAF,KAASf,IAAI,CAACkB,MAAhB;AAAA,GAApB,CAArD,CAP2B,CAQ3B;AACA;;AAEA,MAAMC,eAAe,GAAG9C,WAAW,CAAC,UAAC+C,CAAD,EAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACd,UAAL,EAAiB;AACb,aAAOe,KAAK,CAAC,mBAAD,CAAZ;AACH;;AAED,QAAI,CAACnB,WAAL,EACI;AAEJC,IAAAA,cAAc,CAAC,EAAD,CAAd,CAVuC,CAWvC;AACA;;AAEA,WAAOM,QAAQ,CAAC;AACZa,MAAAA,IAAI,EAAE/B,mBADM;AAEZgC,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEzB,IAAI,CAACe,EADX;AAEFW,QAAAA,OAAO,EAAEvB;AAFP;AAFM,KAAD,CAAf;AAOH,GArBkC,EAqBhC,CAACI,UAAD,EAAaJ,WAAb,CArBgC,CAAnC;AAuBA,MAAMwB,eAAe,GAAGtD,WAAW,CAAC,YAAM;AACtCuD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA3B,IAAAA,oBAAoB,CAAC,UAAA4B,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAApB;AAEApB,IAAAA,QAAQ,CAAC;AACLa,MAAAA,IAAI,EAAE9B,qBADD;AAEL+B,MAAAA,IAAI,EAAExB,IAAI,CAACe;AAFN,KAAD,CAAR;AAIH,GARkC,EAQhC,EARgC,CAAnC;AAUA,MAAMgB,mBAAmB,GAAG1D,WAAW,CAAC,UAAC+C,CAAD,EAAO;AAC3ChB,IAAAA,cAAc,CAACgB,CAAC,CAACY,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,MAAMC,YAAY,GAAG7D,WAAW,CAAC,YAAM;AACnC,QAAK,CAACmC,EAAN,EACI,OAAOc,KAAK,CAAC,aAAD,CAAZ;;AAEJ,QAAIX,OAAJ,EAAa;AACTD,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE5B,mBADD;AAEL6B,QAAAA,IAAI,EAAExB,IAAI,CAACe;AAFN,OAAD,CAAR;AAIH,KALD,MAMK;AACDL,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE7B,iBADD;AAEL8B,QAAAA,IAAI,EAAExB,IAAI,CAACe;AAFN,OAAD,CAAR;AAIH;AACJ,GAhB+B,EAgB7B,CAACP,EAAE,IAAIA,EAAE,CAACO,EAAV,EAAcf,IAAI,IAAIA,IAAI,CAACe,EAA3B,EAA+BJ,OAA/B,CAhB6B,CAAhC;AAkBA,MAAMwB,eAAe,GAAG9D,WAAW,CAAC,YAAM;AACtCuD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAnB,IAAAA,QAAQ,CAAC;AACLa,MAAAA,IAAI,EAAE3B,eADD;AAEL4B,MAAAA,IAAI,EAAExB,IAAI,CAACe;AAFN,KAAD,CAAR;AAIH,GANkC,EAMhC,CAACP,EAAE,IAAIA,EAAE,CAACO,EAAV,EAAcf,IAAI,IAAIA,IAAI,CAACe,EAA3B,CANgC,CAAnC;;AAQA,MAAMqB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,QAAK,CAAC5B,EAAN,EACI,OAAOc,KAAK,CAAC,aAAD,CAAZ;;AAEJ,QAAIN,aAAJ,EAAmB;AACfN,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAEzB,qBADD;AAEL0B,QAAAA,IAAI,EAAExB,IAAI,CAACkB;AAFN,OAAD,CAAR;AAIH,KALD,MAMK;AACDR,MAAAA,QAAQ,CAAC;AACLa,QAAAA,IAAI,EAAE1B,mBADD;AAEL2B,QAAAA,IAAI,EAAExB,IAAI,CAACkB;AAFN,OAAD,CAAR;AAIH;AACJ,GAhBD;;AAkBA,SACA,mBACI,MAAC,IAAD;AACI,IAAA,GAAG,EAAE,CAAClB,IAAI,CAACqC,SADf,CAEI;AAFJ;AAGI,IAAA,KAAK,EAAGrC,IAAI,CAACsC,MAAL,IAAetC,IAAI,CAACsC,MAAL,CAAY,CAAZ,CAAf,IAAiC,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEtC,IAAI,CAACsC;AAAzB,MAH7C;AAII,IAAA,OAAO,EAAE,CACL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEH;AAA5C,MADK,EAEL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,GAAG,EAAC,OAAvB;AAA+B,MAAA,OAAO,EAAED,YAAxC;AAAsD,MAAA,KAAK,EAAEvB,OAAO,GAAG,SAAH,GAAe,UAAnF;AAA+F,MAAA,YAAY,EAAC;AAA5G,MAFK,EAGL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEgB;AAA5C,MAHK,EAIL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,GAAG,EAAC;AAA1B,MAJK,CAJb;AAUI,IAAA,KAAK,EAAG,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAES;AAAjB,OAAiCpB,aAAa,GAAG,MAAH,GAAY,KAA1D,CAVZ;AAWI,IAAA,KAAK,EAAEhB,IAAI,CAACuC,SAAL,aAAoBvC,IAAI,CAACwC,IAAL,CAAUC,QAA9B,uEAAwD;AAXnE,KAaMzC,IAAI,CAACuC,SAAL,GACD,4BACG,MAAC,IAAD;AACI,IAAA,KAAK,EAAGvC,IAAI,CAAC0C,OAAL,CAAaJ,MAAb,IAAuBtC,IAAI,CAAC0C,OAAL,CAAaJ,MAAb,CAAoB,CAApB,CAAvB,IAAiD,MAAC,UAAD;AAAY,MAAA,MAAM,EAAEtC,IAAI,CAAC0C,OAAL,CAAaJ;AAAjC;AAD7D,KAGI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EACF,MAAC,IAAD;AACI,MAAA,IAAI,EAAE;AAAEK,QAAAA,QAAQ,EAAC,OAAX;AAAoBC,QAAAA,KAAK,EAAE;AAAC7B,UAAAA,EAAE,EAAEf,IAAI,CAAC0C,OAAL,CAAaF,IAAb,CAAkBzB;AAAvB;AAA3B,OADV,CACmE;AADnE;AAEI,MAAA,EAAE,kBAAWf,IAAI,CAAC0C,OAAL,CAAaF,IAAb,CAAkBzB,EAA7B,CAFN,CAEyC;;AAFzC,OAII,sBAAI,MAAC,MAAD,QAASf,IAAI,CAAC0C,OAAL,CAAaF,IAAb,CAAkBC,QAAlB,CAA2B,CAA3B,CAAT,CAAJ,MAJJ,CAFR;AASI,IAAA,KAAK,EAAEzC,IAAI,CAAC0C,OAAL,CAAaF,IAAb,CAAkBC,QAT7B;AAUI,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,OAAO,EAAEzC,IAAI,CAAC0C,OAAL,CAAahB;AAAvC;AAVjB,IAHJ,CADH,CADC,GAmBD,4BACG,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EACF,MAAC,IAAD;AACI,MAAA,IAAI,EAAE;AAAEiB,QAAAA,QAAQ,EAAC,OAAX;AAAoBC,QAAAA,KAAK,EAAE;AAAC7B,UAAAA,EAAE,EAAEf,IAAI,CAACwC,IAAL,CAAUzB;AAAf;AAA3B,OADV,CAC2D;AAD3D;AAEI,MAAA,EAAE,kBAAWf,IAAI,CAACwC,IAAL,CAAUzB,EAArB,CAFN,CAEiC;;AAFjC,OAII,sBAAI,MAAC,MAAD,QAASf,IAAI,CAACwC,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAJ,MAJJ,CAFR;AASI,IAAA,KAAK,EAAEzC,IAAI,CAACwC,IAAL,CAAUC,QATrB;AAUI,IAAA,WAAW,EAAE,MAAC,eAAD;AAAiB,MAAA,OAAO,EAAEzC,IAAI,CAAC0B;AAA/B;AAVjB,IADH,CAhCL,CADJ,EAkDMzB,iBAAiB,IACf,4BACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEkB;AAAhB,KACI,MAAC,IAAD,CAAM,IAAN,QACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAEhB,WAAhC;AAA6C,IAAA,QAAQ,EAAE4B;AAAvD,IADJ,CADJ,EAII,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEtB;AAAlD,oBAJJ,CADJ,EAOI,MAAC,IAAD;AACI,IAAA,MAAM,YAAKT,IAAI,CAAC6C,QAAL,GAAgB7C,IAAI,CAAC6C,QAAL,CAAcC,MAA9B,GAAuC,CAA5C,kBADV;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAE9C,IAAI,CAAC6C,QAAL,IAAiB,EAHjC;AAII,IAAA,UAAU,EAAE,oBAAAE,IAAI;AAAA,aACZ,kBACI,MAAC,OAAD;AACI,QAAA,MAAM,EAAEA,IAAI,CAACP,IAAL,CAAUC,QADtB;AAEI,QAAA,MAAM,EAAE,MAAC,MAAD,QAASM,IAAI,CAACP,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAFZ;AAGI,QAAA,OAAO,EAAEM,IAAI,CAACrB;AAHlB,QADJ,CADY;AAAA;AAJpB,IAPJ,CAnDR,CADA;AA6EH,CAzKD,C,CA2KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe3B,QAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport {Button, Form, Input, Card, Icon, Avatar, List, Comment} from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Link from 'next/link'\r\nimport {useInput} from '../pages/signup'\r\nimport PropTypes, { string, object } from 'prop-types'\r\nimport PostCardContent from '../components/PostCardContent'\r\nimport PostImages from '../components/PostImages'\r\nimport { \r\n    ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST,\r\n    LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST,\r\n} from '../reducers/post'\r\nimport {\r\n    FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST \r\n} from '../reducers/user'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { isLoggedIn, me } = useSelector(state => state.user);\r\n    const { isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n    const isLiked = isLoggedIn && post.Likers && post.Likers.find(v=>v.id === me.id);\r\n    const isFollowinged = isLoggedIn && me.Followings && me.Followings.find(v=>v.id === post.UserId);  \r\n    // 내가 아이디가 1인데 2를 팔로우한 상태면 id:2 이렇게 들어있을 것.   \r\n    // post.UserId 가 me.Followings  내가 팔로우한 명단에 있는지 확인\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n    \r\n        if (!isLoggedIn) {\r\n            return alert('댓글보려면 로그인이 필요합니다.')\r\n        }\r\n        \r\n        if (!commentText)\r\n            return;\r\n\r\n        setCommentText('');\r\n        // console.log('post id = ' + post.id);\r\n        // console.log('comment text = ' + commentText);\r\n\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n                content: commentText,\r\n            }\r\n        })\r\n    }, [isLoggedIn, commentText])\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        console.log('댓글아이콘 클릭');\r\n        setCommentFormOpened(prev => !prev);\r\n\r\n        dispatch({\r\n            type: LOAD_COMMENTS_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [])\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, [])\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if  (!me)\r\n            return alert('로그인이 필요합니다.')\r\n\r\n        if (isLiked) {\r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id,\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id,\r\n            })\r\n        }\r\n    }, [me && me.id, post && post.id, isLiked])\r\n\r\n    const onToggleRetweet = useCallback(() => {\r\n        console.log('리트윗 버튼 클릭');\r\n        dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [me && me.id, post && post.id])\r\n\r\n    const onClickFollow = () => {\r\n        if  (!me)\r\n            return alert('로그인이 필요합니다.')\r\n\r\n        if (isFollowinged) {\r\n            dispatch({\r\n                type: UNFOLLOW_USER_REQUEST,\r\n                data: post.UserId,\r\n            })\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: FOLLOW_USER_REQUEST,\r\n                data: post.UserId,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <Card \r\n            key={+post.createdAt}\r\n            // cover={ post.Images && post.Images[0] && <img alt=\"example\" src={\"http://localhost:3065/\" + post.Images[0].src} />}\r\n            cover={ post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" onClick={onToggleRetweet} />,\r\n                <Icon type=\"heart\" key=\"heart\" onClick={onToggleLike} theme={isLiked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\"/>,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />,\r\n            ]}\r\n            extra={ <Button onClick={onClickFollow}>{isFollowinged ? '언팔로우' : '팔로우' }</Button> }\r\n            title={post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다.` : null}\r\n        >\r\n            { post.RetweetId ? \r\n            (<>\r\n                <Card\r\n                    cover={ post.Retweet.Images && post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} /> }\r\n                >\r\n                    <Card.Meta \r\n                        avatar={\r\n                            <Link\r\n                                href={{ pathname:'/user', query: {id: post.Retweet.User.id} }} // (\"/user?id=1\")\r\n                                as={`/user/${post.Retweet.User.id}`} // (\"/user/1\")\r\n                            >\r\n                                <a> <Avatar>{post.Retweet.User.nickname[0]}</Avatar> </a>\r\n                            </Link>\r\n                        }\r\n                        title={post.Retweet.User.nickname}\r\n                        description={<PostCardContent content={post.Retweet.content} /> }\r\n                    />\r\n                </Card>\r\n            </>) : \r\n            (<>\r\n                <Card.Meta \r\n                    avatar={\r\n                        <Link\r\n                            href={{ pathname:'/user', query: {id: post.User.id} }} // (\"/user?id=1\")\r\n                            as={`/user/${post.User.id}`} // (\"/user/1\")\r\n                        >\r\n                            <a> <Avatar>{post.User.nickname[0]}</Avatar> </a>\r\n                        </Link>\r\n                    }\r\n                    title={post.User.nickname}\r\n                    description={<PostCardContent content={post.content} /> }\r\n                />\r\n            </>)\r\n            }\r\n            \r\n        </Card>\r\n        { commentFormOpened && (\r\n            <>\r\n                <Form onSubmit={onSubmitComment}>\r\n                    <Form.Item>\r\n                        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                    </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                </Form>\r\n                <List \r\n                    header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={post.Comments || []}\r\n                    renderItem={item => (\r\n                        <li>\r\n                            <Comment \r\n                                author={item.User.nickname}\r\n                                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                content={item.content}\r\n                            />\r\n                        </li>\r\n                    )}\r\n                />\r\n            </>\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\n// PostCard.propTypes = {\r\n//     post: PropTypes.shape({\r\n//         User: PropTypes.object,\r\n//         content: PropTypes.string,\r\n//         img: PropTypes.string,\r\n//         // createdAt: object,\r\n//     })\r\n// }\r\n\r\nexport default PostCard\r\n\r\n"]},"metadata":{},"sourceType":"module"}