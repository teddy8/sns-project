{"ast":null,"code":"import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user'; // import next from 'next';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield addPostAPI(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts/');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield loadMainPostsAPI();\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield loadHashtagPostsAPI(action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield loadUserPostsAPI(action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction loadCommentsAPI(id) {\n  return axios.get(`/post/${id}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield loadCommentsAPI(action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadCommentsPosts() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield uploadImagesAPI(action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error('uploadimages saga error  = ' + e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: {// postId: action.data,\n        // userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLoadCommentsPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch7/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","console","log","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","loadCommentsAPI","loadComments","comments","watchLoadCommentsPosts","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \r\n    ADD_COMMENT_REQUEST,  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, \r\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user'\r\n\r\n// import next from 'next';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post/', postData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield addPostAPI(action.data);       \r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        })\r\n        \r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, {content: data.content}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)    \r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts/');\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield loadMainPostsAPI();\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield loadHashtagPostsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield loadUserPostsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\r\n}\r\n\r\nfunction loadCommentsAPI(id) {\r\n    return axios.get(`/post/${id}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield loadCommentsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data,\r\n            }\r\n        })\r\n    } catch(e) {\r\n        console.error(e);        \r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadCommentsPosts() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield uploadImagesAPI(action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        console.error('uploadimages saga error  = ' + e);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data)\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost)    \r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data)\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost)    \r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n    return axios.post(`/post/${postId}/retweet`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data)\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: {\r\n                // postId: action.data,\r\n                // userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet)    \r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadCommentsPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}