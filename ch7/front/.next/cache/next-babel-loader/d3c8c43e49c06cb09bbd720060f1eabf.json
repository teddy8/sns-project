{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadCommentsPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user'; // import next from 'next';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post/', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return addPostAPI(action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts/');\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return loadMainPostsAPI();\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag)));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return loadHashtagPostsAPI(action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return loadUserPostsAPI(action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(id) {\n  return axios.get(\"/post/\".concat(id, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return loadCommentsAPI(action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadCommentsPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadCommentsPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return uploadImagesAPI(action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error('uploadimages saga error  = ' + _context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios[\"delete\"](\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: {// postId: action.data,\n              // userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context19.next = 13;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLoadCommentsPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch7/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","loadComments","watchLoadCommentsPosts","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","postSaga","all","fork","takeLatest","put","call","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","action","data","result","type","id","console","log","error","addCommentAPI","postId","content","comment","loadMainPostsAPI","get","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","retweetAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \r\n    ADD_COMMENT_REQUEST,  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_SUCCESS, \r\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user'\r\n\r\n// import next from 'next';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post/', postData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield addPostAPI(action.data);       \r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        })\r\n        \r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost)\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, {content: data.content}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data)\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)    \r\n}\r\n\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts/');\r\n}\r\n\r\nfunction* loadMainPosts() {\r\n    try {\r\n        const result = yield loadMainPostsAPI();\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts)\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield loadHashtagPostsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts)\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield loadUserPostsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts)\r\n}\r\n\r\nfunction loadCommentsAPI(id) {\r\n    return axios.get(`/post/${id}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield loadCommentsAPI(action.data);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data,\r\n            }\r\n        })\r\n    } catch(e) {\r\n        console.error(e);        \r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadCommentsPosts() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments)\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield uploadImagesAPI(action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch(e) {\r\n        console.error('uploadimages saga error  = ' + e);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages)\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data)\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost)    \r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data)\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost)    \r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n    return axios.post(`/post/${postId}/retweet`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data)\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: {\r\n                // postId: action.data,\r\n                // userId: result.data.userId\r\n            }\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet)    \r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadCommentsPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}