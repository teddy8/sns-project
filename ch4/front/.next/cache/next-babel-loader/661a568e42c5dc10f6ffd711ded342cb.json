{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUpAPI),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loginAPI),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, call, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // SIGN UP\n\nfunction signUpAPI() {\n  return _regeneratorRuntime.wrap(function signUpAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return delay(2000);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          throw new Error('회원가입은 일단 에러나게 해놈');\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // LOG IN\n\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return delay(2000);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([watchSignUp(), // watchHello(),\n          watchLogin()]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // function* hello() {\n//     try {\n//         yield put({\n//             type: 'HELLO_TWO',\n//         });\n//         console.log('hello');\n//     } catch (e) {\n//         console.error(e);\n//     }\n// }\n// function* watchHello() {\n//     yield takeEvery(HELLO_SAGA, function*() {\n//         yield delay(1000);\n//         console.log(1);\n//     })\n// }\n// function* watchLogin() {\n//     yield take(LOG_IN);\n//     yield delay(2000);\n//     yield put({type: LOG_IN_SUCCESS});\n// }","map":{"version":3,"sources":["C:/Program Files/Git/usr/react-nodebird/ch4/front/sagas/user.js"],"names":["signUpAPI","signUp","watchSignUp","loginAPI","login","watchLogin","userSaga","all","fork","takeLatest","put","call","take","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","Error","console","error","type"],"mappings":";;;;yBAYUA,S;;;yBAKAC,M;;;yBAeAC,W;;;yBAKAC,Q;;;yBAKAC,K;;;yBAcAC,U;;;yBAIeC,Q;;AA5DzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiDC,KAAjD,QAA8D,oBAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP,C,CASA;;AACA,SAAUpB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMa,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMU,IAAI,CAACX,SAAD,CAAV;;AAFR;AAAA,gBAGc,IAAIqB,KAAJ,CAAU,kBAAV,CAHd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQC,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUlB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACS,eAAD,EAAkBjB,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACR,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMO,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAER;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQM,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEP;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACM,cAAD,EAAiBX,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNL,WAAW,EADL,EAEN;AACAG,UAAAA,UAAU,EAHJ,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, put, call, take, delay } from 'redux-saga/effects';\r\nimport axios from 'axios'\r\nimport { \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_IN_FAILURE, \r\n    SIGN_UP_REQUEST, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_FAILURE, \r\n} from '../reducers/user'\r\n\r\n// SIGN UP\r\nfunction* signUpAPI() {\r\n    // return axios.post('/login');\r\n    yield delay(2000);\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        yield call(signUpAPI);\r\n        throw new Error('회원가입은 일단 에러나게 해놈');\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); \r\n}\r\n\r\n// LOG IN\r\nfunction* loginAPI() {\r\n//   return axios.post('/login');\r\n    yield delay(2000);\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction *watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchSignUp(),\r\n        // watchHello(),\r\n        watchLogin(),\r\n    ]);\r\n}\r\n\r\n// function* hello() {\r\n//     try {\r\n//         yield put({\r\n//             type: 'HELLO_TWO',\r\n//         });\r\n//         console.log('hello');\r\n//     } catch (e) {\r\n//         console.error(e);\r\n//     }\r\n// }\r\n\r\n// function* watchHello() {\r\n//     yield takeEvery(HELLO_SAGA, function*() {\r\n//         yield delay(1000);\r\n//         console.log(1);\r\n//     })\r\n// }\r\n\r\n\r\n\r\n// function* watchLogin() {\r\n//     yield take(LOG_IN);\r\n//     yield delay(2000);\r\n//     yield put({type: LOG_IN_SUCCESS});\r\n// }"]},"metadata":{},"sourceType":"module"}